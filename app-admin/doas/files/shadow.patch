diff --git a/Makefile b/Makefile
index 5664df5..1df5629 100644
--- a/Makefile
+++ b/Makefile
@@ -3,11 +3,10 @@ YACC?=yacc
 BIN=doas
 PREFIX?=/usr/local
 OBJECTS=doas.o env.o execvpe.o reallocarray.o y.tab.o
-CFLAGS+=-DUSE_PAM -DDOAS_CONF=\"${PREFIX}/etc/doas.conf\" 
-LDFLAGS+=-lpam
+CFLAGS+=-DHAVE_CRYPT_H -DUSE_SHADOW -DDOAS_CONF=\"${PREFIX}/etc/doas.conf\"
+LDFLAGS+=-lcrypt -lbsd
 UNAME_S := $(shell uname -s)
 ifeq ($(UNAME_S),Linux)
-    LDFLAGS+=-lpam_misc
     OBJECTS+=strlcat.o strlcpy.o
     CFLAGS+=-D_GNU_SOURCE
 endif
@@ -39,6 +38,10 @@ install: all
 	mkdir -p $(PREFIX)/man/man5
 	cp doas.conf.5 $(PREFIX)/man/man5/
 
+uninstall:
+	rm $(PREFIX)/bin/$(BIN)
+	rm $(PREFIX)/man/man1/doas.1
+	rm $(PREFIX)/man/man5/doas.conf.5
+
 clean:
 	rm -f $(BIN) $(OBJECTS) y.tab.c
-
diff --git a/doas.c b/doas.c
index 23e1a9e..9622e83 100644
--- a/doas.c
+++ b/doas.c
@@ -66,6 +66,20 @@ static struct pam_conv pamc = { misc_conv, NULL };
 
 #endif // PAM
 
+#if defined(USE_SHADOW)
+#include <shadow.h>
+#include <crypt.h>
+#include <errno.h>
+#include <limits.h>
+#include <pwd.h>
+#include <shadow.h>
+#include <stdio.h>
+#include <string.h>
+#include <syslog.h>
+#include <unistd.h>
+#include <bsd/readpassphrase.h>
+#endif
+
 #include "doas.h"
 
 static void 
@@ -244,6 +258,75 @@ checkconfig(const char *confpath, int argc, char **argv,
 	}
 }
 
+#if defined(USE_SHADOW)
+static void
+shadowauth(const char *myname, int persist)
+{
+	const char *hash;
+	char *encrypted;
+	struct passwd *pw;
+	char *challenge, *response, rbuf[1024], cbuf[128];
+
+#ifdef USE_TIMESTAMP
+	int fd = -1;
+	int valid = 0;
+
+	if (persist)
+		fd = timestamp_open(&valid, 5 * 60);
+	if (fd != -1 && valid == 1)
+		goto good;
+#else
+	(void) persist;
+#endif
+
+	if ((pw = getpwnam(myname)) == NULL)
+		err(1, "getpwnam");
+
+	hash = pw->pw_passwd;
+	if (hash[0] == 'x' && hash[1] == '\0') {
+		struct spwd *sp;
+		if ((sp = getspnam(myname)) == NULL)
+			errx(1, "Authorization failed");
+		hash = sp->sp_pwdp;
+	} else if (hash[0] != '*') {
+		errx(1, "Authorization failed");
+	}
+
+	char host[HOST_NAME_MAX + 1];
+	if (gethostname(host, sizeof(host)))
+		snprintf(host, sizeof(host), "?");
+	snprintf(cbuf, sizeof(cbuf),
+			"\rdoas (%.32s@%.32s) password: ", myname, host);
+	challenge = cbuf;
+
+	response = readpassphrase(challenge, rbuf, sizeof(rbuf), RPP_REQUIRE_TTY);
+	if (response == NULL && errno == ENOTTY) {
+		syslog(LOG_AUTHPRIV | LOG_NOTICE,
+			"tty required for %s", myname);
+		errx(1, "a tty is required");
+	}
+	if (response == NULL)
+		err(1, "readpassphrase");
+	if ((encrypted = crypt(response, hash)) == NULL) {
+		explicit_bzero(rbuf, sizeof(rbuf));
+		errx(1, "Authorization failed");
+	}
+	explicit_bzero(rbuf, sizeof(rbuf));
+	if (strcmp(encrypted, hash) != 0) {
+		syslog(LOG_AUTHPRIV | LOG_NOTICE, "failed auth for %s", myname);
+		errx(1, "Authorization failed");
+	}
+
+#ifdef USE_TIMESTAMP
+good:
+	if (fd != -1) {
+		timestamp_set(fd, 5 * 60);
+		close(fd);
+	}
+#endif
+}
+#endif
+
 #if defined(USE_BSD_AUTH)      
 static void
 authuser(char *myname, char *login_style, int persist)
@@ -423,6 +506,8 @@ main(int argc, char **argv)
 
 #if defined(USE_BSD_AUTH) 
 		authuser(myname, login_style, rule->options & PERSIST);
+#elif defined(USE_SHADOW)
+		shadowauth(myname, rule->options & PERSIST);
 #elif defined(USE_PAM)
 #define PAM_END(msg) do { 						\
 	syslog(LOG_ERR, "%s: %s", msg, pam_strerror(pamh, pam_err)); 	\
