--- a/src/main.rs
+++ b/src/main.rs
@@ -545,23 +545,16 @@
 
         // The user used the sub-command `set`
         Some(("set", set_matches)) => match set_matches.subcommand() {
-            Some(("mute", mute_matches)) => match mute_matches.value_of("arg").unwrap() {
-                "on" => {
-                    if let Err(msg) = mpv.set_mute(Switch::On) {
-                        error!("Error: {}", msg);
-                    }
-                }
-                "off" => {
-                    if let Err(msg) = mpv.set_mute(Switch::Off) {
-                        error!("Error: {}", msg);
-                    }
-                }
-                "toggle" => {
-                    if let Err(msg) = mpv.set_mute(Switch::Toggle) {
-                        error!("Error: {}", msg);
-                    }
+            Some(("mute", mute_matches)) => {
+                let switch_type = match mute_matches.value_of("arg").unwrap() {
+                    "on" => Switch::On,
+                    "off" => Switch::Off,
+                    "toggle" => Switch::Toggle,
+                    _ => unreachable!(),
+                };
+                if let Err(msg) = mpv.set_mute(switch_type) {
+                    error!("Error: {}", msg);
                 }
-                _ => unreachable!(),
             },
 
             Some(("property", property_matches)) => {
@@ -574,89 +567,61 @@
 
             Some(("volume", volume_matches)) => {
                 let num = volume_matches.value_of("num").unwrap();
+                let number_change_option;
                 if volume_matches.is_present("increase") {
-                    if let Err(msg) =
-                        mpv.set_volume(num.parse::<f64>().unwrap(), NumberChangeOptions::Increase)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Increase;
                 } else if volume_matches.is_present("decrease") {
-                    if let Err(msg) =
-                        mpv.set_volume(num.parse::<f64>().unwrap(), NumberChangeOptions::Decrease)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Decrease;
                 } else {
-                    if let Err(msg) =
-                        mpv.set_volume(num.parse::<f64>().unwrap(), NumberChangeOptions::Absolute)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Absolute;
+                }
+                if let Err(msg) = mpv.set_volume(
+                    num.parse::<f64>().unwrap(),
+                    number_change_option,
+                ) {
+                    error!("Error: {}", msg);
                 }
             }
 
             Some(("speed", speed_matches)) => {
                 let num = speed_matches.value_of("num").unwrap();
+                let number_change_option;
                 if speed_matches.is_present("increase") {
-                    if let Err(msg) =
-                        mpv.set_speed(num.parse::<f64>().unwrap(), NumberChangeOptions::Increase)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Increase;
                 } else if speed_matches.is_present("decrease") {
-                    if let Err(msg) =
-                        mpv.set_speed(num.parse::<f64>().unwrap(), NumberChangeOptions::Decrease)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Decrease;
                 } else {
-                    if let Err(msg) =
-                        mpv.set_speed(num.parse::<f64>().unwrap(), NumberChangeOptions::Absolute)
-                    {
-                        error!("Error: {}", msg);
-                    }
+                    number_change_option = NumberChangeOptions::Absolute;
+                }
+                if let Err(msg) = mpv.set_speed(
+                    num.parse::<f64>().unwrap(),
+                    number_change_option,
+                ) {
+                    error!("Error: {}", msg);
                 }
             }
 
             Some(("loop-file", loop_playlist_matches)) => {
-                match loop_playlist_matches.value_of("arg").unwrap() {
-                    "on" => {
-                        if let Err(msg) = mpv.set_loop_file(Switch::On) {
-                            error!("Error: {}", msg);
-                        }
-                    }
-                    "off" => {
-                        if let Err(msg) = mpv.set_loop_file(Switch::Off) {
-                            error!("Error: {}", msg);
-                        }
-                    }
-                    "toggle" => {
-                        if let Err(msg) = mpv.set_loop_file(Switch::Toggle) {
-                            error!("Error: {}", msg);
-                        }
-                    }
+                let switch_type = match loop_playlist_matches.value_of("arg").unwrap() {
+                    "on" => Switch::On,
+                    "off" => Switch::Off,
+                    "toggle" => Switch::Toggle,
                     _ => unreachable!(),
+                };
+                if let Err(msg) = mpv.set_loop_file(switch_type) {
+                    error!("Error: {}", msg);
                 }
             }
 
             Some(("loop-playlist", loop_playlist_matches)) => {
-                match loop_playlist_matches.value_of("arg").unwrap() {
-                    "on" => {
-                        if let Err(msg) = mpv.set_loop_playlist(Switch::On) {
-                            error!("Error: {}", msg);
-                        }
-                    }
-                    "off" => {
-                        if let Err(msg) = mpv.set_loop_playlist(Switch::Off) {
-                            error!("Error: {}", msg);
-                        }
-                    }
-                    "toggle" => {
-                        if let Err(msg) = mpv.set_loop_playlist(Switch::Toggle) {
-                            error!("Error: {}", msg);
-                        }
-                    }
+                let switch_type = match loop_playlist_matches.value_of("arg").unwrap() {
+                    "on" => Switch::On,
+                    "off" => Switch::Off,
+                    "toggle" => Switch::Toggle,
                     _ => unreachable!(),
+                };
+                if let Err(msg) = mpv.set_loop_playlist(switch_type) {
+                    error!("Error: {}", msg);
                 }
             }
 
@@ -671,19 +636,17 @@
                 n = n * -1.0f64;
             }
             let n = n;
+            let seek_option;
             if seek_matches.is_present("absolute") {
-                if let Err(msg) = mpv.seek(n, SeekOptions::Absolute) {
-                    error!("Error: {}", msg);
-                }
+                seek_option = SeekOptions::Absolute;
             } else if seek_matches.is_present("absolute-percent") {
-                if let Err(msg) = mpv.seek(n, SeekOptions::AbsolutePercent) {
-                    error!("Error: {}", msg);
-                }
+                seek_option = SeekOptions::AbsolutePercent;
             } else if seek_matches.is_present("relative-percent") {
-                if let Err(msg) = mpv.seek(n, SeekOptions::RelativePercent) {
-                    error!("Error: {}", msg);
-                }
-            } else if let Err(msg) = mpv.seek(n, SeekOptions::Relative) {
+                seek_option = SeekOptions::RelativePercent;
+            } else {
+                seek_option = SeekOptions::Relative;
+            }
+            if let Err(msg) = mpv.seek(n, seek_option) {
                 error!("Error: {}", msg);
             }
         }
@@ -736,22 +699,13 @@
                                     if observe_matches.is_present("hide-data") {
                                         match property {
                                             Property::Duration(_) => {
-                                                println!(
-                                                    "PropertyChange (name=duration, id={})",
-                                                    id
-                                                )
+                                                println!("PropertyChange (name=duration, id={})", id)
                                             }
                                             Property::Metadata(_) => {
-                                                println!(
-                                                    "PropertyChange (name=metadata, id={})",
-                                                    id
-                                                )
+                                                println!("PropertyChange (name=metadata, id={})", id)
                                             }
                                             Property::Path(_) => {
-                                                println!(
-                                                    "PropertyChange (name=property, id={})",
-                                                    id
-                                                )
+                                                println!("PropertyChange (name=property, id={})", id)
                                             }
                                             Property::Pause(_) => {
                                                 println!("PropertyChange (name=pause, id={})", id)
@@ -760,10 +714,7 @@
                                                 println!("PropertyChange (name=pause, id={})", id)
                                             }
                                             Property::Unknown { name, data: _ } => {
-                                                println!(
-                                                    "PropertyChange (name={}, id={})",
-                                                    name, id
-                                                )
+                                                println!("PropertyChange (name={}, id={})", name, id)
                                             }
                                         }
                                     } else {
@@ -831,23 +782,17 @@
                         "playlist" => PlaylistAddTypeOptions::Playlist,
                         _ => unreachable!(),
                     };
-                    match add_matches.value_of("mode").unwrap() {
-                        "replace" => {
-                            if let Err(msg) =
-                                mpv.playlist_add(file, file_type, PlaylistAddOptions::Replace)
-                            {
-                                error!("Error: {}", msg);
-                            }
-                        }
-
-                        "append" => {
-                            if let Err(msg) =
-                                mpv.playlist_add(file, file_type, PlaylistAddOptions::Append)
-                            {
-                                error!("Error: {}", msg);
-                            }
-                        }
+                    let add_option = match add_matches.value_of("mode").unwrap() {
+                        "replace" => PlaylistAddOptions::Replace,
+                        "append" => PlaylistAddOptions::Append,
                         _ => unreachable!(),
+                    };
+                    if let Err(msg) = mpv.playlist_add(
+                        file,
+                        file_type,
+                        add_option,
+                    ) {
+                        error!("Error: {}", msg);
                     }
                 }
 
