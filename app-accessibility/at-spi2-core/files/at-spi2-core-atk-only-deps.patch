--- a/doc/meson.build
+++ b/doc/meson.build
@@ -44,31 +44,32 @@
 
 
 ################################ libatspi
-libatspi_expand_content_files = []
+if not get_option('atk_only')
+  libatspi_expand_content_files = []
 
-libatspi_toml_data = configuration_data()
-libatspi_toml_data.set('VERSION', meson.project_version())
+  libatspi_toml_data = configuration_data()
+  libatspi_toml_data.set('VERSION', meson.project_version())
 
-libatspi_toml = configure_file(
-  input: 'libatspi.toml.in',
-  output: 'libatspi.toml',
-  configuration: libatspi_toml_data
-)
-
-custom_target('libatspi-doc',
-  input: [ libatspi_toml, libatspi_gir[0] ],
-  output: 'libatspi',
-  command: [
-    gidocgen,
-    'generate',
-    gidocgen_common_args,
-    '--config=@INPUT0@',
-    '--output-dir=@OUTPUT@',
-    '--content-dir=@0@'.format(meson.current_source_dir()),
-    '@INPUT1@',
-  ],
-  install: true,
-  install_dir: docs_dir,
-  depend_files: libatspi_expand_content_files,
-)
+  libatspi_toml = configure_file(
+    input: 'libatspi.toml.in',
+    output: 'libatspi.toml',
+    configuration: libatspi_toml_data
+  )
 
+  custom_target('libatspi-doc',
+    input: [ libatspi_toml, libatspi_gir[0] ],
+    output: 'libatspi',
+    command: [
+      gidocgen,
+      'generate',
+      gidocgen_common_args,
+      '--config=@INPUT0@',
+      '--output-dir=@OUTPUT@',
+      '--content-dir=@0@'.format(meson.current_source_dir()),
+      '@INPUT1@',
+    ],
+    install: true,
+    install_dir: docs_dir,
+    depend_files: libatspi_expand_content_files,
+  )
+endif
--- a/meson.build
+++ b/meson.build
@@ -135,8 +135,8 @@
 
 glib_dep = dependency('glib-2.0', version: glib_req_version)
 gobject_dep = dependency('gobject-2.0', version: gobject_req_version)
-gio_dep = dependency('gio-2.0', version: gio_req_version)
 if not get_option('atk_only')
+  gio_dep = dependency('gio-2.0', version: gio_req_version)
   if cc.has_function('dlopen')
     dl_dep = []
   elif cc.has_function('dlopen', args: '-ldl')
@@ -144,9 +144,9 @@
   else
     error('Could not find a library with the dlopen function')
   endif
+  gmodule_dep = dependency('gmodule-2.0', version: gmodule_req_version)
+  libxml_dep = dependency('libxml-2.0', version: libxml_req_version)
 endif
-gmodule_dep = dependency('gmodule-2.0', version: gmodule_req_version)
-libxml_dep = dependency('libxml-2.0', version: libxml_req_version)
 
 x11_deps = []
 x11_dep = dependency('x11', required: get_option('x11'))
@@ -186,6 +186,29 @@
 # introspection support
 gir = find_program('g-ir-scanner', required : get_option('introspection'))
 have_gir = gir.found() and (not meson.is_cross_build() or get_option('introspection').enabled())
+introspection_sources = [
+  'Accessible.xml',
+  'Action.xml',
+  'Application.xml',
+  'Cache.xml',
+  'Collection.xml',
+  'Component.xml',
+  'DeviceEventController.xml',
+  'DeviceEventListener.xml',
+  'Document.xml',
+  'EditableText.xml',
+  'Event.xml',
+  'Hyperlink.xml',
+  'Hypertext.xml',
+  'Image.xml',
+  'Registry.xml',
+  'Selection.xml',
+  'Socket.xml',
+  'Table.xml',
+  'TableCell.xml',
+  'Text.xml',
+  'Value.xml',
+]
 
 xgettext = find_program('xgettext', required : false)
 
--- a/xml/meson.build
+++ b/xml/meson.build
@@ -1,29 +1,5 @@
 generator = find_program('generate-introspection.py')
 
-introspection_sources = [
-  'Accessible.xml',
-  'Action.xml',
-  'Application.xml',
-  'Cache.xml',
-  'Collection.xml',
-  'Component.xml',
-  'DeviceEventController.xml',
-  'DeviceEventListener.xml',
-  'Document.xml',
-  'EditableText.xml',
-  'Event.xml',
-  'Hyperlink.xml',
-  'Hypertext.xml',
-  'Image.xml',
-  'Registry.xml',
-  'Selection.xml',
-  'Socket.xml',
-  'Table.xml',
-  'TableCell.xml',
-  'Text.xml',
-  'Value.xml',
-]
-
 introspection_generated = custom_target(
   'introspection_generated',
   input: introspection_sources,
